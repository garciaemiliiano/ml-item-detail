// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	context "context"
	entitiesitems "item-detail-api/src/core/entities/items"
	items "item-detail-api/src/core/usecases/items"

	mock "github.com/stretchr/testify/mock"
)

// ListItems is an autogenerated mock type for the ListItems type
type ListItems struct {
	mock.Mock
}

// Execute provides a mock function with given fields: ctx, config
func (_m *ListItems) Execute(ctx context.Context, config items.ListItemsConfig) ([]entitiesitems.Item, int, error) {
	ret := _m.Called(ctx, config)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 []entitiesitems.Item
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, items.ListItemsConfig) ([]entitiesitems.Item, int, error)); ok {
		return rf(ctx, config)
	}
	if rf, ok := ret.Get(0).(func(context.Context, items.ListItemsConfig) []entitiesitems.Item); ok {
		r0 = rf(ctx, config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entitiesitems.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, items.ListItemsConfig) int); ok {
		r1 = rf(ctx, config)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, items.ListItemsConfig) error); ok {
		r2 = rf(ctx, config)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewListItems creates a new instance of ListItems. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewListItems(t interface {
	mock.TestingT
	Cleanup(func())
}) *ListItems {
	mock := &ListItems{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
